SKI STATION DATABASE - USER CREDENTIALS AND SYSTEM INFO
=======================================================

DATABASE CONNECTION:
- Host: localhost:5432
- Database: ski_station_db
- Username: admin
- Password: admin

API SERVER:
- URL: http://localhost:5213
- Swagger: http://localhost:5213/swagger

FRONTEND:
- URL: http://localhost:5173 (when running npm run dev)

=======================================================
USER ACCOUNTS AND PASSWORDS
=======================================================

1. ADMINISTRATOR ACCOUNTS:
--------------------------
Username: admin
Password: admin123
Role: administrator
Status: active
User ID: 4
Description: Main system administrator

Username: Zorik
Password: password
Role: administrator  
Status: active
User ID: 11
Description: Additional admin account created via SQL

2. OPERATOR ACCOUNT:
-------------------
Username: operator
Password: operator123
Role: operator
Status: active
User ID: 5
Description: System operator for handling issues and approvals

3. RESIDENT ACCOUNTS:
--------------------
Username: jan.kowalski
Password: password123
Role: resident
Status: active
User ID: 1
Apartment: 1A (Building: ul. Kwiatowa 15, Warszawa)
Description: Resident with multiple payments and issues

Username: anna.nowak
Password: password123
Role: resident
Status: active
User ID: 2
Apartment: 1B (Building: ul. Kwiatowa 15, Warszawa)
Description: Resident with good payment history

Username: piotr.wisniewski
Password: password123
Role: resident
Status: active
User ID: 3
Apartment: 1 (Building: ul. Słoneczna 8, Kraków)
Description: Resident with overdue payments

4. ADDITIONAL TEST USERS:
-------------------------
Username: test.user
Password: password (uses same BCrypt hash as Zorik)
Role: resident
Status: active
User ID: 6
Description: Additional test user for frontend testing

Username: new.user
Password: (created via frontend)
Role: resident
Status: active
User ID: 7
Description: User created via frontend registration

=======================================================
BCRYPT PASSWORD HASHES
=======================================================

The following BCrypt hash is used for multiple accounts:
$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi

This hash corresponds to the password: "password"

For accounts with "password123":
- These use a different hash generated during user creation
- The exact hash depends on when the user was created

For accounts with "admin123" and "operator123":
- These also use different hashes generated during user creation

=======================================================
DATABASE STRUCTURE SUMMARY
=======================================================

BUILDINGS:
1. ul. Główna 10, 00-001 Warszawa
2. ul. Słoneczna 25, 10-002 Kraków  
3. ul. Morska 5, 80-003 Gdańsk
4. ul. Testowa 15, 00-001 Warszawa (if created)

APARTMENTS:
- Building 1: Apartments 1, 2, 3
- Building 2: Apartments 4, 5
- Building 3: Apartments 6, 7
- Building 4: Apartments 8, 9, 10 (if created)

RESIDENTS MAPPING:
- jan.kowalski → Apartment 1 (Building 1)
- anna.nowak → Apartment 2 (Building 2)
- piotr.wisniewski → Apartment 4 (Building 3)

=======================================================
TESTING SCENARIOS
=======================================================

1. LOGIN TESTING:
- Use any of the above username/password combinations
- Test different roles (admin, operator, resident)
- Test inactive accounts (if any created)

2. PAYMENT TESTING:
- jan.kowalski: Mix of approved, pending, and overdue payments
- anna.nowak: Mostly approved payments with some pending
- piotr.wisniewski: Multiple overdue payments with penalties

3. ISSUE TESTING:
- All residents have various issues (plumbing, electrical, maintenance)
- Different statuses: pending, in_progress, resolved
- Issues linked to repair orders with costs and contractors

4. NOTIFICATIONS TESTING:
- System generates notifications based on:
  * Resolved issues (last 30 days)
  * Overdue payments
  * Pending issues
  * System maintenance announcements

=======================================================
API ENDPOINTS FOR TESTING
=======================================================

Authentication:
POST /api/auth/login
POST /api/auth/logout

Users:
GET /api/users
GET /api/users/{id}
POST /api/users
PUT /api/users/{id}
DELETE /api/users/{id}

Payments:
GET /api/payments
GET /api/payments/{id}

Issues:
GET /api/issues
GET /api/issues/{id}

Notifications:
GET /api/notifications

=======================================================
FRONTEND TESTING NOTES
=======================================================

1. All mock data has been replaced with real API calls
2. Components updated to use real data:
   - PaymentsPanel
   - IssuesPanel
   - PaymentHistory
   - NotificationsPanel
   - AuthContext
   - User management hooks

3. Test different user roles to see different data:
   - Admins: Can see all users and manage system
   - Operators: Can handle issues and approve payments
   - Residents: Can see their own payments and report issues

4. Test error scenarios:
   - Invalid login credentials
   - Network errors
   - Empty data states

=======================================================
TROUBLESHOOTING
=======================================================

1. If login fails:
   - Check if server is running on port 5213
   - Verify database connection
   - Check user exists in database
   - Verify password hash matches

2. If API calls fail:
   - Check CORS settings in server
   - Verify API endpoints are accessible
   - Check browser console for errors

3. If no data appears:
   - Run the SQL queries to populate test data
   - Check database has been seeded properly
   - Verify foreign key relationships

=======================================================
SQL QUERIES FOR VERIFICATION
=======================================================

-- Check all users
SELECT user_id, login, role, user_status FROM useraccount ORDER BY user_id;

-- Check user with payments and issues
SELECT 
    u.login,
    COUNT(DISTINCT p.payment_id) as payments,
    COUNT(DISTINCT i.issue_id) as issues
FROM useraccount u
LEFT JOIN resident r ON u.user_id = r.user_id
LEFT JOIN tenant t ON r.resident_id = t.resident_id
LEFT JOIN payment p ON t.tenant_id = p.tenant_id
LEFT JOIN issue i ON u.user_id = i.issuer_id
GROUP BY u.user_id, u.login
ORDER BY u.user_id;

-- Test login (replace 'username' with actual login)
SELECT user_id, login, password, role, user_status 
FROM useraccount 
WHERE login = 'admin';

=======================================================
LAST UPDATED: January 2024
======================================================= 