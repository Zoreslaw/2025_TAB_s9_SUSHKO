// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624035657_AddOrderIdToPayment")]
    partial class AddOrderIdToPayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("apartment_number");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    b.HasKey("ApartmentId");

                    b.HasIndex("BuildingId");

                    b.ToTable("apartment");
                });

            modelBuilder.Entity("server.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.HasKey("BuildingId");

                    b.ToTable("building");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IssueId"));

                    b.Property<DateTime>("IssueCreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issue_creation_date");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("text")
                        .HasColumnName("issue_description");

                    b.Property<string>("IssueStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issue_status");

                    b.Property<string>("IssueType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issue_type");

                    b.Property<DateTime?>("IssueUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issue_update_date");

                    b.Property<int>("IssuerId")
                        .HasColumnType("integer")
                        .HasColumnName("issuer_id");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operator_id");

                    b.HasKey("IssueId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("OperatorId");

                    b.ToTable("issue");
                });

            modelBuilder.Entity("server.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int?>("IssueId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("IssueId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Contractor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contractor");

                    b.Property<decimal>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("cost");

                    b.Property<int>("IssueId")
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    b.Property<DateTime>("OrderCreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_creation_date");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_description");

                    b.Property<DateTime?>("OrderEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_end_date");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<int>("OrdererId")
                        .HasColumnType("integer")
                        .HasColumnName("orderer_id");

                    b.HasKey("OrderId");

                    b.HasIndex("IssueId");

                    b.HasIndex("OrdererId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("integer")
                        .HasColumnName("approver_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PaymentAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("payment_amount");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text")
                        .HasColumnName("payment_description");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.HasKey("PaymentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TenantId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("server.Models.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResidentId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<DateTime?>("MoveinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("movein_date");

                    b.Property<DateTime?>("MoveoutDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moveout_date");

                    b.Property<string>("ResidentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resident_status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ResidentId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("resident");
                });

            modelBuilder.Entity("server.Models.Tenant", b =>
                {
                    b.Property<int>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TenantId"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<DateTime?>("LeaseEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lease_end_date");

                    b.Property<DateTime?>("LeaseStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lease_start_date");

                    b.Property<int>("ResidentId")
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    b.HasKey("TenantId");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ResidentId")
                        .IsUnique();

                    b.ToTable("tenant");
                });

            modelBuilder.Entity("server.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("server.Models.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<DateTime>("UserCreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_creation_date");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_status");

                    b.HasKey("UserId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("useraccount");
                });

            modelBuilder.Entity("server.Models.Apartment", b =>
                {
                    b.HasOne("server.Models.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.HasOne("server.Models.UserAccount", "Issuer")
                        .WithMany("IssuedIssues")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.UserAccount", "Operator")
                        .WithMany("OperatedIssues")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Issuer");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("server.Models.Notification", b =>
                {
                    b.HasOne("server.Models.Issue", "Issue")
                        .WithMany("Notifications")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Order", "Order")
                        .WithMany("Notifications")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Payment", "Payment")
                        .WithMany("Notifications")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.UserAccount", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Order");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.HasOne("server.Models.Issue", "Issue")
                        .WithMany("Orders")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserAccount", "Orderer")
                        .WithMany("Orders")
                        .HasForeignKey("OrdererId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Orderer");
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.HasOne("server.Models.Apartment", "Apartment")
                        .WithMany("Payments")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserAccount", "Approver")
                        .WithMany("ApprovedPayments")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId");

                    b.HasOne("server.Models.Tenant", "Tenant")
                        .WithMany("Payments")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Approver");

                    b.Navigation("Order");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("server.Models.Resident", b =>
                {
                    b.HasOne("server.Models.Apartment", "Apartment")
                        .WithMany("Residents")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.UserAccount", "User")
                        .WithMany("Residents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Tenant", b =>
                {
                    b.HasOne("server.Models.Apartment", "Apartment")
                        .WithMany("Tenants")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Resident", "Resident")
                        .WithOne("Tenant")
                        .HasForeignKey("server.Models.Tenant", "ResidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("server.Models.Apartment", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Residents");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("server.Models.Building", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("server.Models.Resident", b =>
                {
                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("server.Models.Tenant", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("server.Models.UserAccount", b =>
                {
                    b.Navigation("ApprovedPayments");

                    b.Navigation("IssuedIssues");

                    b.Navigation("Notifications");

                    b.Navigation("OperatedIssues");

                    b.Navigation("Orders");

                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
