// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523201253_ModelsCreated")]
    partial class ModelsCreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApartmentId"));

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("apartment_number");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    b.HasKey("ApartmentId")
                        .HasName("apartment_pkey");

                    b.HasIndex("BuildingId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("server.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.HasKey("BuildingId")
                        .HasName("building_pkey");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IssueId"));

                    b.Property<DateOnly?>("IssueCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("issue_creation_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("text")
                        .HasColumnName("issue_description");

                    b.Property<string>("IssueStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issue_status");

                    b.Property<string>("IssueType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issue_type");

                    b.Property<DateOnly?>("IssueUpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("issue_update_date");

                    b.Property<int?>("IssuerId")
                        .HasColumnType("integer")
                        .HasColumnName("issuer_id");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer")
                        .HasColumnName("operator_id");

                    b.HasKey("IssueId")
                        .HasName("issue_pkey");

                    b.HasIndex("IssuerId");

                    b.HasIndex("OperatorId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("server.Models.Lease", b =>
                {
                    b.Property<int>("LeaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lease_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LeaseId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<DateOnly?>("LeaseEndDate")
                        .HasColumnType("date")
                        .HasColumnName("lease_end_date");

                    b.Property<DateOnly?>("LeaseStartDate")
                        .HasColumnType("date")
                        .HasColumnName("lease_start_date");

                    b.Property<int?>("ResidentId")
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    b.HasKey("LeaseId")
                        .HasName("lease_pkey");

                    b.HasIndex("ApartmentId");

                    b.HasIndex(new[] { "ResidentId" }, "tenant_resident_id_key")
                        .IsUnique();

                    b.ToTable("Leases");
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Contractor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contractor");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("cost");

                    b.Property<int?>("IssueId")
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    b.Property<DateOnly?>("OrderCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("order_creation_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("OrderDescription")
                        .HasColumnType("text")
                        .HasColumnName("order_description");

                    b.Property<DateOnly?>("OrderEndDate")
                        .HasColumnType("date")
                        .HasColumnName("order_end_date");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status");

                    b.Property<int?>("OrdererId")
                        .HasColumnType("integer")
                        .HasColumnName("orderer_id");

                    b.HasKey("OrderId")
                        .HasName("order_pkey");

                    b.HasIndex("IssueId");

                    b.HasIndex("OrdererId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("integer")
                        .HasColumnName("approver_id");

                    b.Property<int?>("LeaseId")
                        .HasColumnType("integer")
                        .HasColumnName("lease_id");

                    b.Property<decimal?>("PaymentAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("payment_amount");

                    b.Property<DateOnly?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("text")
                        .HasColumnName("payment_description");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status");

                    b.HasKey("PaymentId")
                        .HasName("payment_pkey");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("LeaseId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("server.Models.Resident", b =>
                {
                    b.Property<int>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("resident_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResidentId"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("apartment_id");

                    b.Property<DateOnly?>("MoveinDate")
                        .HasColumnType("date")
                        .HasColumnName("movein_date");

                    b.Property<DateOnly?>("MoveoutDate")
                        .HasColumnType("date")
                        .HasColumnName("moveout_date");

                    b.Property<string>("ResidentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resident_status");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ResidentId")
                        .HasName("resident_pkey");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("server.Models.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<DateOnly?>("UserCreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("user_creation_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_status");

                    b.HasKey("UserId")
                        .HasName("useraccount_pkey");

                    b.HasIndex(new[] { "Login" }, "useraccount_login_key")
                        .IsUnique();

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("server.Models.Apartment", b =>
                {
                    b.HasOne("server.Models.Building", "Building")
                        .WithMany("Apartments")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("apartment_building_id_fkey");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.HasOne("server.Models.UserAccount", "Issuer")
                        .WithMany("IssueIssuers")
                        .HasForeignKey("IssuerId")
                        .HasConstraintName("issue_issuer_id_fkey");

                    b.HasOne("server.Models.UserAccount", "Operator")
                        .WithMany("IssueOperators")
                        .HasForeignKey("OperatorId")
                        .HasConstraintName("issue_operator_id_fkey");

                    b.Navigation("Issuer");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("server.Models.Lease", b =>
                {
                    b.HasOne("server.Models.Apartment", "Apartment")
                        .WithMany("Leases")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("tenant_apartment_id_fkey");

                    b.HasOne("server.Models.Resident", "Resident")
                        .WithOne("Lease")
                        .HasForeignKey("server.Models.Lease", "ResidentId")
                        .HasConstraintName("tenant_resident_id_fkey");

                    b.Navigation("Apartment");

                    b.Navigation("Resident");
                });

            modelBuilder.Entity("server.Models.Order", b =>
                {
                    b.HasOne("server.Models.Issue", "Issue")
                        .WithMany("Orders")
                        .HasForeignKey("IssueId")
                        .HasConstraintName("order_issue_id_fkey");

                    b.HasOne("server.Models.UserAccount", "Orderer")
                        .WithMany("Orders")
                        .HasForeignKey("OrdererId")
                        .HasConstraintName("order_orderer_id_fkey");

                    b.Navigation("Issue");

                    b.Navigation("Orderer");
                });

            modelBuilder.Entity("server.Models.Payment", b =>
                {
                    b.HasOne("server.Models.Apartment", "Apartment")
                        .WithMany("Payments")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("payment_apartment_id_fkey");

                    b.HasOne("server.Models.UserAccount", "Approver")
                        .WithMany("Payments")
                        .HasForeignKey("ApproverId")
                        .HasConstraintName("payment_approver_id_fkey");

                    b.HasOne("server.Models.Lease", "Lease")
                        .WithMany("Payments")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("payment_tenant_id_fkey");

                    b.Navigation("Apartment");

                    b.Navigation("Approver");

                    b.Navigation("Lease");
                });

            modelBuilder.Entity("server.Models.Resident", b =>
                {
                    b.HasOne("server.Models.Apartment", "Apartment")
                        .WithMany("Residents")
                        .HasForeignKey("ApartmentId")
                        .HasConstraintName("resident_apartment_id_fkey");

                    b.HasOne("server.Models.UserAccount", "User")
                        .WithMany("Residents")
                        .HasForeignKey("UserId")
                        .HasConstraintName("resident_user_id_fkey");

                    b.Navigation("Apartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Apartment", b =>
                {
                    b.Navigation("Leases");

                    b.Navigation("Payments");

                    b.Navigation("Residents");
                });

            modelBuilder.Entity("server.Models.Building", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("server.Models.Issue", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("server.Models.Lease", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("server.Models.Resident", b =>
                {
                    b.Navigation("Lease");
                });

            modelBuilder.Entity("server.Models.UserAccount", b =>
                {
                    b.Navigation("IssueIssuers");

                    b.Navigation("IssueOperators");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
